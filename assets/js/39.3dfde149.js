(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{357:function(s,a,t){"use strict";t.r(a);var n=t(11),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("table",[a("thead",[a("tr",[a("th",[s._v("1天前")]),s._v(" "),a("th",[a("a",{attrs:{href:"https://leetcode.cn/problems/lru-cache/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#146 LRU 缓存"),a("OutboundLink")],1)]),s._v(" "),a("th",[s._v("中等")]),s._v(" "),a("th",[s._v("1 次")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#23 合并 K 个升序链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("困难")]),s._v(" "),a("td",[s._v("1 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#148 排序链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("中等")]),s._v(" "),a("td",[s._v("1 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/copy-list-with-random-pointer/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#138 随机链表的复制"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("中等")]),s._v(" "),a("td",[s._v("1 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#25 K 个一组翻转链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("困难")]),s._v(" "),a("td",[s._v("2 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#24 两两交换链表中的节点"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("中等")]),s._v(" "),a("td",[s._v("3 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#19 删除链表的倒数第 N 个结点"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("中等")]),s._v(" "),a("td",[s._v("4 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/add-two-numbers/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#2 两数相加"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("中等")]),s._v(" "),a("td",[s._v("4 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#21 合并两个有序链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("简单")]),s._v(" "),a("td",[s._v("3 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#141 环形链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("简单")]),s._v(" "),a("td",[s._v("20 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#142 环形链表 II"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("中等")]),s._v(" "),a("td",[s._v("4 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#234 回文链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("简单")]),s._v(" "),a("td",[s._v("1 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#206 反转链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("简单")]),s._v(" "),a("td",[s._v("6 次")])]),s._v(" "),a("tr",[a("td",[s._v("1 天前")]),s._v(" "),a("td",[a("a",{attrs:{href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("#160 相交链表"),a("OutboundLink")],1)]),s._v(" "),a("td",[s._v("简单")]),s._v(" "),a("td",[s._v("3 次")])])])]),s._v(" "),a("h2",{attrs:{id:"链表相交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表相交"}},[s._v("#")]),s._v(" 链表相交")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getIntersectionNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" headA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" headB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n思路\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、分别对两个链表定义两个指针\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" 判断两个指针是否相等 （内部条件 a指针空了就赋值b的节点，b也是如此，一直判断下去） \n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、返回任一指针即可（因为肯定存在相交的）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"翻转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#翻转链表"}},[s._v("#")]),s._v(" 翻转链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n递归做简单\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、判断结束条件  head 为空 以及他的next为空 返回 head\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、否则将head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next 传递 进行递归，得到 【翻转后链表】\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、这时候  head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next 赋值为 head （此时的head相当于下一次的next，这里就实现了翻转后的赋值）\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next 赋值为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" 断开链表 \n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、最终返回 【翻转后链表】\n  \n双指针翻转\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、定义第一个指针 res 为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" ， 第二个 now 为当前head\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" now不为空循环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、开始赋值  a、定义一个item 为 now的next， b、now的next 为res， c、res为now d、 now为item （有点绕的）\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、最终返回 res\n  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"回文链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回文链表"}},[s._v("#")]),s._v(" 回文链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n思路\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、这个简答，直接把链表转化为list（有序的）\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、双指针判断\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"环形链表-1、2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环形链表-1、2"}},[s._v("#")]),s._v(" 环形链表 1、2")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasCycle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n判断一个链表有没有环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、快慢指针，但是第二个指针得定义为head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" 循环对快指针以及快指针的next判断\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、内部两个指针相交则有环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、快指针比满指针循环多一个next\n找到相交节点的第一个位置\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、定义两个一模一样的指针\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、选一个为快指针，判断条件一样，但是其循环必须放在"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("的首行\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、两指针相交后 在合源链表比较\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、两指针任选一个 为index1  head为index2\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、只要两个index不相等 一直 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("循环判断\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("、之后任选一个index返回即可\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"合并链表（需要创建新链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并链表（需要创建新链表"}},[s._v("#")]),s._v(" 合并链表（需要创建新链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" list1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" list2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n思路\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、需要定义一个新的链表\n  \t统一思路：\n  \t     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t对之后都是对p操作 ，最后返回res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" 循环 list1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" list2 都不为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、比较val的大小 选择赋值 并且进行next循环\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("完之后 肯定还有没赋值完成的 然后判断 直接把剩下的list赋值到p后面\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、返回\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"两数相加（需要创建新链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两数相加（需要创建新链表"}},[s._v("#")]),s._v(" 两数相加（需要创建新链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addTwoNumbers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、定义一个新链表\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、定义一个item 方便对溢出"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("的值进行赋值\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、l1跟l2只有有一个不为空就进行"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("循环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、内部定义 first跟second 初始值为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，根据链表的值进行赋值\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、 sum的值为item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("first"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" second \n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("、当前节点的值sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("、下一次item的值为 sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" 然后指针进入循环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("、最后判断item是否为空 来进行最后节点的赋值\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("、最后返回\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"删除倒数第n个节点-（需要创建新链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除倒数第n个节点-（需要创建新链表"}},[s._v("#")]),s._v(" 删除倒数第n个节点 （需要创建新链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeNthFromEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("、定义一个新链表\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、快慢指针针对新链表，定义两个一模一样的\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、快指针先走n步\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("循环快指针的next，慢指针也跟着走 （之所以快指针的next是因为新链表这里next了）\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、最后 slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、返回 \n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"两两交换结点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两两交换结点"}},[s._v("#")]),s._v(" 两两交换结点")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapPairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、递归\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、统一的结束条件 head 以及head的next为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("就返回head；\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、然后将【head的的next】记录下来为node\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、记录下来的node的next进行递归 返回为swap\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、然后【head的next】为 swap\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("、node 的next为head；\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("、最终返回node\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"k个一组翻转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k个一组翻转链表"}},[s._v("#")]),s._v(" k个一组翻转链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseKGroup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、定义一个新链表 以及两个一模一样的指针 p1 p2\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" 循环p2不为空\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、然后p2走k步，这个时候"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v("循环的判断条件增加p2不为空（否则会空指针\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、之后判断p2为空直接结束循环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、然后开始赋值环节 a、记录p2的next为end b、然后p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" 断开链 c、记录p1的next为start d、然后p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next调用翻转链表函数进行翻转 传值为start， 这样就得到这一段的翻转链表， e、然后start的next赋值为end，再接上上一段 f、然后 p1 p2指针都赋值为start，开始新的下一段"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("循环\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("、最后返回res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("、翻转函数同上\n  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"随机链表的复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随机链表的复制"}},[s._v("#")]),s._v(" 随机链表的复制")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义hash")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapPairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、hashmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 递归\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、返回条件依然是head以及head next为空 返回head\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("条件判断 head是否存在hash 在 直接返回value 否则进行组装\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、首先得到head next，然后放到map中\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、然后对新的node的next 以及 指针 进行head的赋值\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"排序链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序链表"}},[s._v("#")]),s._v(" 排序链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapPairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、先把链表转换成list\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、对list进行排序\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、再将list转化成链表\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"合并k个升序链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并k个升序链表"}},[s._v("#")]),s._v(" 合并k个升序链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapPairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、分解成 【合并两个升序链表】\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"lru缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lru缓存"}},[s._v("#")]),s._v(" lru缓存")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapPairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n思路：\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、简单点 直接继承linkedHashMap\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);