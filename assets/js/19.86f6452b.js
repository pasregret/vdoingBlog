(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{343:function(v,_,e){v.exports=e.p+"assets/img/es-write.682fde4e.png"},344:function(v,_,e){v.exports=e.p+"assets/img/es-write-detail.41838273.png"},464:function(v,_,e){"use strict";e.r(_);var t=e(11),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),_("p",[v._v("ES 写入数据的工作原理是什么啊？ES 查询数据的工作原理是什么啊？底层的 Lucene 介绍一下呗？倒排索引了解吗？")]),v._v(" "),_("h2",{attrs:{id:"面试官心理分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试官心理分析"}},[v._v("#")]),v._v(" 面试官心理分析")]),v._v(" "),_("p",[v._v("问这个，其实面试官就是要看看你了解不了解 es 的一些基本原理，因为用 es 无非就是写入数据，搜索数据。你要是不明白你发起一个写入和搜索请求的时候，es 在干什么，那你真的是......")]),v._v(" "),_("p",[v._v("对 es 基本就是个黑盒，你还能干啥？你唯一能干的就是用 es 的 api 读写数据了。要是出点什么问题，你啥都不知道，那还能指望你什么呢？")]),v._v(" "),_("h2",{attrs:{id:"面试题剖析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试题剖析"}},[v._v("#")]),v._v(" 面试题剖析")]),v._v(" "),_("h3",{attrs:{id:"es-写数据过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#es-写数据过程"}},[v._v("#")]),v._v(" es 写数据过程")]),v._v(" "),_("ul",[_("li",[v._v("客户端选择一个 node 发送请求过去，这个 node 就是 "),_("code",[v._v("coordinating node")]),v._v(" （协调节点）。")]),v._v(" "),_("li",[_("code",[v._v("coordinating node")]),v._v(" 对 document 进行"),_("strong",[v._v("路由")]),v._v("，将请求转发给对应的 node（有 primary shard）。")]),v._v(" "),_("li",[v._v("实际的 node 上的 "),_("code",[v._v("primary shard")]),v._v(" 处理请求，然后将数据同步到 "),_("code",[v._v("replica node")]),v._v(" 。")]),v._v(" "),_("li",[_("code",[v._v("coordinating node")]),v._v(" 如果发现 "),_("code",[v._v("primary node")]),v._v(" 和所有 "),_("code",[v._v("replica node")]),v._v(" 都搞定之后，就返回响应结果给客户端。")])]),v._v(" "),_("p",[_("img",{attrs:{src:e(343),alt:"es-write"}})]),v._v(" "),_("h3",{attrs:{id:"es-读数据过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#es-读数据过程"}},[v._v("#")]),v._v(" es 读数据过程")]),v._v(" "),_("p",[v._v("可以通过 "),_("code",[v._v("doc id")]),v._v(" 来查询，会根据 "),_("code",[v._v("doc id")]),v._v(" 进行 hash，判断出来当时把 "),_("code",[v._v("doc id")]),v._v(" 分配到了哪个 shard 上面去，从那个 shard 去查询。")]),v._v(" "),_("ul",[_("li",[v._v("客户端发送请求到"),_("strong",[v._v("任意")]),v._v("一个 node，成为 "),_("code",[v._v("coordinate node")]),v._v(" 。")]),v._v(" "),_("li",[_("code",[v._v("coordinate node")]),v._v(" 对 "),_("code",[v._v("doc id")]),v._v(" 进行哈希路由，将请求转发到对应的 node，此时会使用 "),_("code",[v._v("round-robin")]),v._v(" "),_("strong",[v._v("随机轮询算法")]),v._v("，在 "),_("code",[v._v("primary shard")]),v._v(" 以及其所有 replica 中随机选择一个，让读请求负载均衡。")]),v._v(" "),_("li",[v._v("接收请求的 node 返回 document 给 "),_("code",[v._v("coordinate node")]),v._v(" 。")]),v._v(" "),_("li",[_("code",[v._v("coordinate node")]),v._v(" 返回 document 给客户端。")])]),v._v(" "),_("h3",{attrs:{id:"es-搜索数据过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#es-搜索数据过程"}},[v._v("#")]),v._v(" es 搜索数据过程")]),v._v(" "),_("p",[v._v("es 最强大的是做全文检索，就是比如你有三条数据：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("java真好玩儿啊\njava好难学啊\nj2ee特别牛\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br")])]),_("p",[v._v("你根据 "),_("code",[v._v("java")]),v._v(" 关键词来搜索，将包含 "),_("code",[v._v("java")]),v._v(" 的 "),_("code",[v._v("document")]),v._v(" 给搜索出来。es 就会给你返回：java 真好玩儿啊，java 好难学啊。")]),v._v(" "),_("ul",[_("li",[v._v("客户端发送请求到一个 "),_("code",[v._v("coordinate node")]),v._v(" 。")]),v._v(" "),_("li",[v._v("协调节点将搜索请求转发到"),_("strong",[v._v("所有")]),v._v("的 shard 对应的 "),_("code",[v._v("primary shard")]),v._v(" 或 "),_("code",[v._v("replica shard")]),v._v(" ，都可以。")]),v._v(" "),_("li",[v._v("query phase：每个 shard 将自己的搜索结果（其实就是一些 "),_("code",[v._v("doc id")]),v._v(" ）返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果。")]),v._v(" "),_("li",[v._v("fetch phase：接着由协调节点根据 "),_("code",[v._v("doc id")]),v._v(" 去各个节点上"),_("strong",[v._v("拉取实际")]),v._v("的 "),_("code",[v._v("document")]),v._v(" 数据，最终返回给客户端。")])]),v._v(" "),_("blockquote",[_("p",[v._v("写请求是写入 primary shard，然后同步给所有的 replica shard；读请求可以从 primary shard 或 replica shard 读取，采用的是随机轮询算法。")])]),v._v(" "),_("h3",{attrs:{id:"写数据底层原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#写数据底层原理"}},[v._v("#")]),v._v(" 写数据底层原理")]),v._v(" "),_("p",[_("img",{attrs:{src:e(344),alt:"es-write-detail"}})]),v._v(" "),_("p",[v._v("先写入内存 buffer，在 buffer 里的时候数据是搜索不到的；同时将数据写入 translog 日志文件。")]),v._v(" "),_("p",[v._v("如果 buffer 快满了，或者到一定时间，就会将内存 buffer 数据 "),_("code",[v._v("refresh")]),v._v(" 到一个新的 "),_("code",[v._v("segment file")]),v._v(" 中，但是此时数据不是直接进入 "),_("code",[v._v("segment file")]),v._v(" 磁盘文件，而是先进入 "),_("code",[v._v("os cache")]),v._v(" 。这个过程就是 "),_("code",[v._v("refresh")]),v._v(" 。")]),v._v(" "),_("p",[v._v("每隔 1 秒钟，es 将 buffer 中的数据写入一个"),_("strong",[v._v("新的")]),v._v(" "),_("code",[v._v("segment file")]),v._v(" ，每秒钟会产生一个"),_("strong",[v._v("新的磁盘文件")]),v._v(" "),_("code",[v._v("segment file")]),v._v(" ，这个 "),_("code",[v._v("segment file")]),v._v(" 中就存储最近 1 秒内 buffer 中写入的数据。")]),v._v(" "),_("p",[v._v("但是如果 buffer 里面此时没有数据，那当然不会执行 refresh 操作，如果 buffer 里面有数据，默认 1 秒钟执行一次 refresh 操作，刷入一个新的 segment file 中。")]),v._v(" "),_("p",[v._v("操作系统里面，磁盘文件其实都有一个东西，叫做 "),_("code",[v._v("os cache")]),v._v(" ，即操作系统缓存，就是说数据写入磁盘文件之前，会先进入 "),_("code",[v._v("os cache")]),v._v(" ，先进入操作系统级别的一个内存缓存中去。只要 "),_("code",[v._v("buffer")]),v._v(" 中的数据被 refresh 操作刷入 "),_("code",[v._v("os cache")]),v._v(" 中，这个数据就可以被搜索到了。")]),v._v(" "),_("p",[v._v("为什么叫 es 是"),_("strong",[v._v("准实时")]),v._v("的？ "),_("code",[v._v("NRT")]),v._v(" ，全称 "),_("code",[v._v("near real-time")]),v._v(" 。默认是每隔 1 秒 refresh 一次的，所以 es 是准实时的，因为写入的数据 1 秒之后才能被看到。可以通过 es 的 "),_("code",[v._v("restful api")]),v._v(" 或者 "),_("code",[v._v("java api")]),v._v(" ，"),_("strong",[v._v("手动")]),v._v("执行一次 refresh 操作，就是手动将 buffer 中的数据刷入 "),_("code",[v._v("os cache")]),v._v(" 中，让数据立马就可以被搜索到。只要数据被输入 "),_("code",[v._v("os cache")]),v._v(" 中，buffer 就会被清空了，因为不需要保留 buffer 了，数据在 translog 里面已经持久化到磁盘去一份了。")]),v._v(" "),_("p",[v._v("重复上面的步骤，新的数据不断进入 buffer 和 translog，不断将 "),_("code",[v._v("buffer")]),v._v(" 数据写入一个又一个新的 "),_("code",[v._v("segment file")]),v._v(" 中去，每次 "),_("code",[v._v("refresh")]),v._v(" 完 buffer 清空，translog 保留。随着这个过程推进，translog 会变得越来越大。当 translog 达到一定长度的时候，就会触发 "),_("code",[v._v("commit")]),v._v(" 操作。")]),v._v(" "),_("p",[v._v("commit 操作发生第一步，就是将 buffer 中现有数据 "),_("code",[v._v("refresh")]),v._v(" 到 "),_("code",[v._v("os cache")]),v._v(" 中去，清空 buffer。然后，将一个 "),_("code",[v._v("commit point")]),v._v(" 写入磁盘文件，里面标识着这个 "),_("code",[v._v("commit point")]),v._v(" 对应的所有 "),_("code",[v._v("segment file")]),v._v(" ，同时强行将 "),_("code",[v._v("os cache")]),v._v(" 中目前所有的数据都 "),_("code",[v._v("fsync")]),v._v(" 到磁盘文件中去。最后"),_("strong",[v._v("清空")]),v._v(" 现有 translog 日志文件，重启一个 translog，此时 commit 操作完成。")]),v._v(" "),_("p",[v._v("这个 commit 操作叫做 "),_("code",[v._v("flush")]),v._v(" 。默认 30 分钟自动执行一次 "),_("code",[v._v("flush")]),v._v(" ，但如果 translog 过大，也会触发 "),_("code",[v._v("flush")]),v._v(" 。flush 操作就对应着 commit 的全过程，我们可以通过 es api，手动执行 flush 操作，手动将 os cache 中的数据 fsync 强刷到磁盘上去。")]),v._v(" "),_("p",[v._v("translog 日志文件的作用是什么？你执行 commit 操作之前，数据要么是停留在 buffer 中，要么是停留在 os cache 中，无论是 buffer 还是 os cache 都是内存，一旦这台机器死了，内存中的数据就全丢了。所以需要将数据对应的操作写入一个专门的日志文件 "),_("code",[v._v("translog")]),v._v(" 中，一旦此时机器宕机，再次重启的时候，es 会自动读取 translog 日志文件中的数据，恢复到内存 buffer 和 os cache 中去。")]),v._v(" "),_("p",[v._v("translog 其实也是先写入 os cache 的，默认每隔 5 秒刷一次到磁盘中去，所以默认情况下，可能有 5 秒的数据会仅仅停留在 buffer 或者 translog 文件的 os cache 中，如果此时机器挂了，会"),_("strong",[v._v("丢失")]),v._v(" 5 秒钟的数据。但是这样性能比较好，最多丢 5 秒的数据。也可以将 translog 设置成每次写操作必须是直接 "),_("code",[v._v("fsync")]),v._v(" 到磁盘，但是性能会差很多。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("index.translog.sync_interval")]),v._v(" 控制 translog 多久 fsync 到磁盘,最小为 100ms；")]),v._v(" "),_("li",[_("code",[v._v("index.translog.durability")]),v._v(" translog 是每 5 秒钟刷新一次还是每次请求都 fsync，这个参数有 2 个取值：request(每次请求都执行 fsync,es 要等 translog fsync 到磁盘后才会返回成功)和 async(默认值，translog 每隔 5 秒钟 fsync 一次)。")])]),v._v(" "),_("p",[v._v("实际上你在这里，如果面试官没有问你 es 丢数据的问题，你可以在这里给面试官炫一把，你说，其实 es 第一是准实时的，数据写入 1 秒后可以搜索到；可能会丢失数据的。有 5 秒的数据，停留在 buffer、translog os cache、segment file os cache 中，而不在磁盘上，此时如果宕机，会导致 5 秒的"),_("strong",[v._v("数据丢失")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("总结一下")]),v._v("，数据先写入内存 buffer，然后每隔 1s，将数据 refresh 到 os cache，到了 os cache 数据就能被搜索到（所以我们才说 es 从写入到能被搜索到，中间有 1s 的延迟）。每隔 5s，将数据写入 translog 文件（这样如果机器宕机，内存数据全没，最多会有 5s 的数据丢失），translog 大到一定程度，或者默认每隔 30mins，会触发 commit 操作，将缓冲区的数据都 flush 到 segment file 磁盘文件中。")]),v._v(" "),_("blockquote",[_("p",[v._v("数据写入 segment file 之后，同时就建立好了倒排索引。")])]),v._v(" "),_("h3",{attrs:{id:"删除-更新数据底层原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#删除-更新数据底层原理"}},[v._v("#")]),v._v(" 删除/更新数据底层原理")]),v._v(" "),_("p",[v._v("如果是删除操作，commit 的时候会生成一个 "),_("code",[v._v(".del")]),v._v(" 文件，里面将某个 doc 标识为 "),_("code",[v._v("deleted")]),v._v(" 状态，那么搜索的时候根据 "),_("code",[v._v(".del")]),v._v(" 文件就知道这个 doc 是否被删除了。")]),v._v(" "),_("p",[v._v("如果是更新操作，就是将原来的 doc 标识为 "),_("code",[v._v("deleted")]),v._v(" 状态，然后新写入一条数据。")]),v._v(" "),_("p",[v._v("buffer 每 refresh 一次，就会产生一个 "),_("code",[v._v("segment file")]),v._v(" ，所以默认情况下是 1 秒钟一个 "),_("code",[v._v("segment file")]),v._v(" ，这样下来 "),_("code",[v._v("segment file")]),v._v(" 会越来越多，此时会定期执行 merge。每次 merge 的时候，会将多个 "),_("code",[v._v("segment file")]),v._v(" 合并成一个，同时这里会将标识为 "),_("code",[v._v("deleted")]),v._v(" 的 doc 给"),_("strong",[v._v("物理删除掉")]),v._v("，然后将新的 "),_("code",[v._v("segment file")]),v._v(" 写入磁盘，这里会写一个 "),_("code",[v._v("commit point")]),v._v(" ，标识所有新的 "),_("code",[v._v("segment file")]),v._v(" ，然后打开 "),_("code",[v._v("segment file")]),v._v(" 供搜索使用，同时删除旧的 "),_("code",[v._v("segment file")]),v._v(" 。")]),v._v(" "),_("h3",{attrs:{id:"底层-lucene"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#底层-lucene"}},[v._v("#")]),v._v(" 底层 lucene")]),v._v(" "),_("p",[v._v("简单来说，lucene 就是一个 jar 包，里面包含了封装好的各种建立倒排索引的算法代码。我们用 Java 开发的时候，引入 lucene jar，然后基于 lucene 的 api 去开发就可以了。")]),v._v(" "),_("p",[v._v("通过 lucene，我们可以将已有的数据建立索引，lucene 会在本地磁盘上面，给我们组织索引的数据结构。")]),v._v(" "),_("h3",{attrs:{id:"倒排索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#倒排索引"}},[v._v("#")]),v._v(" 倒排索引")]),v._v(" "),_("p",[v._v("在搜索引擎中，每个文档都有一个对应的文档 ID，文档内容被表示为一系列关键词的集合。例如，文档 1 经过分词，提取了 20 个关键词，每个关键词都会记录它在文档中出现的次数和出现位置。")]),v._v(" "),_("p",[v._v("那么，倒排索引就是"),_("strong",[v._v("关键词到文档")]),v._v(" ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现了关键词。")]),v._v(" "),_("p",[v._v("举个栗子。")]),v._v(" "),_("p",[v._v("有以下文档：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("DocId")]),v._v(" "),_("th",[v._v("Doc")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("1")]),v._v(" "),_("td",[v._v("谷歌地图之父跳槽 Facebook")])]),v._v(" "),_("tr",[_("td",[v._v("2")]),v._v(" "),_("td",[v._v("谷歌地图之父加盟 Facebook")])]),v._v(" "),_("tr",[_("td",[v._v("3")]),v._v(" "),_("td",[v._v("谷歌地图创始人拉斯离开谷歌加盟 Facebook")])]),v._v(" "),_("tr",[_("td",[v._v("4")]),v._v(" "),_("td",[v._v("谷歌地图之父跳槽 Facebook 与 Wave 项目取消有关")])]),v._v(" "),_("tr",[_("td",[v._v("5")]),v._v(" "),_("td",[v._v("谷歌地图之父拉斯加盟社交网站 Facebook")])])])]),v._v(" "),_("p",[v._v("对文档进行分词之后，得到以下"),_("strong",[v._v("倒排索引")]),v._v("。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("WordId")]),v._v(" "),_("th",[v._v("Word")]),v._v(" "),_("th",[v._v("DocIds")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("1")]),v._v(" "),_("td",[v._v("谷歌")]),v._v(" "),_("td",[v._v("1, 2, 3, 4, 5")])]),v._v(" "),_("tr",[_("td",[v._v("2")]),v._v(" "),_("td",[v._v("地图")]),v._v(" "),_("td",[v._v("1, 2, 3, 4, 5")])]),v._v(" "),_("tr",[_("td",[v._v("3")]),v._v(" "),_("td",[v._v("之父")]),v._v(" "),_("td",[v._v("1, 2, 4, 5")])]),v._v(" "),_("tr",[_("td",[v._v("4")]),v._v(" "),_("td",[v._v("跳槽")]),v._v(" "),_("td",[v._v("1, 4")])]),v._v(" "),_("tr",[_("td",[v._v("5")]),v._v(" "),_("td",[v._v("Facebook")]),v._v(" "),_("td",[v._v("1, 2, 3, 4, 5")])]),v._v(" "),_("tr",[_("td",[v._v("6")]),v._v(" "),_("td",[v._v("加盟")]),v._v(" "),_("td",[v._v("2, 3, 5")])]),v._v(" "),_("tr",[_("td",[v._v("7")]),v._v(" "),_("td",[v._v("创始人")]),v._v(" "),_("td",[v._v("3")])]),v._v(" "),_("tr",[_("td",[v._v("8")]),v._v(" "),_("td",[v._v("拉斯")]),v._v(" "),_("td",[v._v("3, 5")])]),v._v(" "),_("tr",[_("td",[v._v("9")]),v._v(" "),_("td",[v._v("离开")]),v._v(" "),_("td",[v._v("3")])]),v._v(" "),_("tr",[_("td",[v._v("10")]),v._v(" "),_("td",[v._v("与")]),v._v(" "),_("td",[v._v("4")])]),v._v(" "),_("tr",[_("td",[v._v("..")]),v._v(" "),_("td",[v._v("..")]),v._v(" "),_("td",[v._v("..")])])])]),v._v(" "),_("p",[v._v("另外，实用的倒排索引还可以记录更多的信息，比如文档频率信息，表示在文档集合中有多少个文档包含某个单词。")]),v._v(" "),_("p",[v._v("那么，有了倒排索引，搜索引擎可以很方便地响应用户的查询。比如用户输入查询 "),_("code",[v._v("Facebook")]),v._v(" ，搜索系统查找倒排索引，从中读出包含这个单词的文档，这些文档就是提供给用户的搜索结果。")]),v._v(" "),_("p",[v._v("要注意倒排索引的两个重要细节：")]),v._v(" "),_("ul",[_("li",[v._v("倒排索引中的所有词项对应一个或多个文档；")]),v._v(" "),_("li",[v._v("倒排索引中的词项"),_("strong",[v._v("根据字典顺序升序排列")])])]),v._v(" "),_("blockquote",[_("p",[v._v("上面只是一个简单的栗子，并没有严格按照字典顺序升序排列。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);